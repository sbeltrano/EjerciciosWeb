{"version":3,"sources":["logo.svg","App.js","Joke.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","PUBLIC_KEY","Joke","useState","joke","setJoke","useEffect","navigator","onLine","ts","Number","Date","hash","md5","create","update","URL","hex","fetch","then","res","json","objetos","Object","keys","data","results","console","log","name","localStorage","setItem","getItem","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"4NAAe,I,MCyBAA,I,+BCrBTC,EAAa,mCAsCJC,MAnCf,WAAiB,IAAD,EACUC,mBAAS,UADnB,mBACPC,EADO,KACDC,EADC,OAEYF,mBAAS,IAFrB,mBA2Bd,OA3Bc,UAIdG,qBAAU,WACR,GAAKC,UAAUC,OAMR,CACL,IAAMC,EAAKC,OAAO,IAAIC,MAChBC,EAAOC,IAAIC,SACjBF,EAAKG,OAAON,EAhBE,2CAgBiBR,GAC/B,IAAMe,EAAG,6DAAyDP,EAAzD,yCAA4FR,EAA5F,iBAA+GW,EAAKK,OAC7HC,MAAMF,GACHG,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GACL,IAAIE,EAAUC,OAAOC,KAAKJ,EAAIK,KAAKC,SACnCC,QAAQC,IAAIR,EAAIK,KAAKC,QAAQJ,EAAQ,IAAIO,MACzCxB,EAAQe,EAAIK,KAAKC,QAAQJ,EAAQ,IAAIO,MACrCC,aAAaC,QAAQ,UAAWX,EAAIK,KAAKC,QAAQJ,EAAQ,IAAIO,cAhB5B,OAAjCC,aAAaE,QAAQ,QACvB3B,EAAQ,cAERA,EAAQyB,aAAaE,QAAQ,WAgBhC,IAGD,gCACE,8DACA,6BAAK5B,QCzBL6B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BlC,UAAUmC,cACPC,SAASH,GACTrB,MAAK,SAACyB,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf1C,UAAUmC,cAAcQ,YAI1BvB,QAAQC,IACN,+GAKEa,GAAUA,EAAOU,UACnBV,EAAOU,SAASP,KAMlBjB,QAAQC,IAAI,sCAGRa,GAAUA,EAAOW,WACnBX,EAAOW,UAAUR,WAO5BS,OAAM,SAACC,GACN3B,QAAQ2B,MAAM,4CAA6CA,MC9FjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFQnB,SAAkB1B,GACvB,GAA6C,kBAAmBlC,UAAW,CAGzE,GADkB,IAAIS,IAAIoD,GAAwBjC,OAAOC,SAASiC,MACpDC,SAAWnC,OAAOC,SAASkC,OAIvC,OAGFnC,OAAOoC,iBAAiB,QAAQ,WAC9B,IAAM/B,EAAK,UAAM4B,GAAN,sBAEPnC,IAgEV,SAAiCO,EAAOC,GAEtCvB,MAAMsB,EAAO,CACXgC,QAAS,CAAE,iBAAkB,YAE5BrD,MAAK,SAACsD,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CtE,UAAUmC,cAAcoC,MAAM3D,MAAK,SAACyB,GAClCA,EAAamC,aAAa5D,MAAK,WAC7BgB,OAAOC,SAAS4C,eAKpBzC,EAAgBC,EAAOC,MAG1BY,OAAM,WACL1B,QAAQC,IAAI,oEAtFVqD,CAAwBzC,EAAOC,GAI/BlC,UAAUmC,cAAcoC,MAAM3D,MAAK,WACjCQ,QAAQC,IACN,+GAMJW,EAAgBC,EAAOC,OE9B/ByC,GAKA3B,M","file":"static/js/main.aeb723ea.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./styles.css\";\r\nimport md5 from \"js-md5\";\r\n\r\nconst PUBLIC_KEY = \"1d9cc5c33bc9407be8b1a7634edc3bac\";\r\nconst PRIVATE_KEY = \"d347c10eb32fb83f7a6cb41ffe5850bbf0e69961\";\r\n\r\nfunction Joke() {\r\n  const [joke, setJoke] = useState(\"Chiste\");\r\n  const [names, setNames] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!navigator.onLine) {\r\n      if (localStorage.getItem(\"joke\") === null) {\r\n        setJoke(\"Loading...\");\r\n      } else {\r\n        setJoke(localStorage.getItem(\"joke\"));\r\n      }\r\n    } else {\r\n      const ts = Number(new Date());\r\n      const hash = md5.create();\r\n      hash.update(ts + PRIVATE_KEY + PUBLIC_KEY);\r\n      const URL = `https://gateway.marvel.com/v1/public/characters?ts=${ts}&orderBy=name&limit=10&apikey=${PUBLIC_KEY}&hash=${hash.hex()}`;\r\n      fetch(URL)\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          var objetos = Object.keys(res.data.results);\r\n          console.log(res.data.results[objetos[0]].name);\r\n          setJoke(res.data.results[objetos[0]].name);\r\n          localStorage.setItem(\"Avenger\", res.data.results[objetos[0]].name);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>First avenger alphabetically</h1>\r\n      <h2>{joke}</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Joke;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Joke from \"./Joke\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Joke />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}